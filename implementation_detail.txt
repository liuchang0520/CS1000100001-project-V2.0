Worker Registration: 

	After worker process starts, it will use RPC to call the RPC handler-RegisterWorker in master. The request from worker process to master will contain the worker process port, so go channel-workerChan in master struct will store the worker processes port numbers; After the successful registration, worker also can get the response from master indicating how many reducers master want to use.



Task Assignment:

	Master will call RPC handler-Work in worker to achieve task assignment.

	For simplicity, master will assign one map task for one input file. To make sure task only assigned to those idle workers, I use channel-workerChan in master struct to store the idle worker port number. Once a worker process is assigned a task, this port number is popped out from workerChan, and it will reenter workerChan after it responds to master for the assigned task.

	After all map tasks finished, master will assign reduce tasks to workers.




How Worker deals with Map Task: 

	From the request message from master, worker will know the input file name. Workers will transform the text in input file to key value pairs. Based on keys, it will write these pairs to different intermediate directory - One reducer will read from one intermediate directory.




How Worker deals with Reduce Task:

	From the assignment request from master, workers can know which intermediate dir to read from. Workers will read all the intermediate files under that intermediate dir. After reading the intermediate key value pairs, a worker will do reduce tasks, and write final result to one output file in outDir. One output file per reducer. 




Fault Tolerance:
	If master gets a failed response from worker by calling Work RPC handler, master will reassign this task to another idle worker, whose number is kept in workerChan. In the same time, I will increase the counter which keeps count of fail times of this task.If it reaches some threshold, the whole map reduce task is aborted.


	



e.g.
In src/egWordCount, I include the relevant files for a word count task.

Folders with prefix "inte-" are locations where intermediate files are stored. inte-0 means files under this dir will be read by reducer with index 0.

To understand how the intermediate files are relevant with input files, consider this example: Under inte-0, there is a file inter-1.txt, which contains the key value pairs generated from input file 1.txt. 

The folder outdir contains the files generated by reducers, one file per reducer.

output.txt is the aggregated outout result from outdir.