stream data =====> flink =====> write to files =====> start MR jobs on these files

input: read from dir

//////////////////////////////
/////////////////////////////





Implementation Detail:

	Worker Registration: 
	After   then go channel in master struct will store the worker processes port numbers; after the successful registration, worker also can get the ongoing map reduce task name

how to inform the reducers about the location of intermediate files?


deal with slow worker? 95%...

how to find idle workers? golang: channel;  java: no idea...

task assignment:
RPC, gRPC possibly

Master/Worker Simulating:
	Thread Pool

Input Partition

Fault tolerance: golang ==> channel, java ...
				 ping the workers who failed the tasks, before rejoining


ZooKeeper


For file system, no HDFS involved, just simple File system in MacOS

About internship:

	data streaming / data ingestion: Kafka, flink, gobblin

	Database integration: AresDB, Pinot




//////////////////////////////
project submit to Prof.Nath:
go env setup

export "GOPATH=$PWD"

shell scrip: assume we have at most 10 workers, to change this max value in .......




//////////////////////////////
submit:

We've coverd some assignments for simple map reduce python program, either sequentially or multi threaded.

In this project I will try to simulate this paper: 《...》 for the internal implementation.(task assigment, fault tolarance, etc.)


one line of STDIN would become content in one file ?
multiple line?



reference:
https://astaxie.gitbooks.io/build-web-application-with-golang/en/08.4.html



generate exe and exec file fro MacOS and Windows, write ssh / chmod 777


languate : go, internship, concurrency (go routine, light weighted thread)